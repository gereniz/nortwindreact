{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nexport function getProductsSuccess(products) {\n  return {\n    type: actionTypes.GET_PRODUCTS_SUCCESS,\n    payload: products\n  };\n}\nexport function createProductSuccess(product) {\n  return {\n    type: actionTypes.CREATE_PRODUCT_SUCCESS,\n    payload: product\n  };\n}\nexport function updateProductSuccess(product) {\n  return {\n    type: actionTypes.UPDATE_PRODUCT_SUCCESS,\n    payload: product\n  };\n}\nexport function saveProductApi(product) {\n  return fetch(\"http://localhost:3000/products/\" + (product.productID || \"\"), {\n    method: product.productID ? \"PUT\" : \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(product)\n  }).then(handleResponse).catch(handleError);\n}\nexport function saveProduct(product) {\n  return function (dispatch) {\n    return saveProductApi(product).then(savedProduct => {\n      product.productID ? dispatch(updateProductSuccess(savedProduct)) : dispatch(createProductSuccess(savedProduct));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport async function handleResponse(response) {\n  if (response.ok) {\n    return response.json;\n  }\n\n  const error = await response.text();\n  throw new Error(error);\n}\nexport function handleError(error) {\n  console.error(\"An error occurred\");\n  throw error;\n}\nexport function getProducts(categoryID) {\n  return function (dispatch) {\n    let url = \"http://localhost:3000/products\";\n\n    if (categoryID) {\n      url = url + \"?categoryID=\" + categoryID;\n    }\n\n    return fetch(url).then(response => response.json()).then(result => dispatch(getProductsSuccess(result)));\n  };\n}","map":{"version":3,"sources":["/Users/gereniz/Projects/btkakademi/btkakademireact/reactcourse/northwind-redux/src/redux/actions/productActions.js"],"names":["actionTypes","getProductsSuccess","products","type","GET_PRODUCTS_SUCCESS","payload","createProductSuccess","product","CREATE_PRODUCT_SUCCESS","updateProductSuccess","UPDATE_PRODUCT_SUCCESS","saveProductApi","fetch","productID","method","headers","body","JSON","stringify","then","handleResponse","catch","handleError","saveProduct","dispatch","savedProduct","error","response","ok","json","text","Error","console","getProducts","categoryID","url","result"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI,oBADb;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID;AAED,OAAO,SAASI,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,SAAO;AAAEJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,sBAApB;AAA4CH,IAAAA,OAAO,EAAEE;AAArD,GAAP;AACD;AAED,OAAO,SAASE,oBAAT,CAA8BF,OAA9B,EAAuC;AAC5C,SAAO;AAAEJ,IAAAA,IAAI,EAAEH,WAAW,CAACU,sBAApB;AAA4CL,IAAAA,OAAO,EAAEE;AAArD,GAAP;AACD;AAED,OAAO,SAASI,cAAT,CAAwBJ,OAAxB,EAAiC;AACtC,SAAOK,KAAK,CAAC,qCAAqCL,OAAO,CAACM,SAAR,IAAqB,EAA1D,CAAD,EAAgE;AAC1EC,IAAAA,MAAM,EAAEP,OAAO,CAACM,SAAR,GAAoB,KAApB,GAA4B,MADsC;AAE1EE,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFiE;AAG1EC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,OAAf;AAHoE,GAAhE,CAAL,CAKJY,IALI,CAKCC,cALD,EAMJC,KANI,CAMEC,WANF,CAAP;AAOD;AAED,OAAO,SAASC,WAAT,CAAqBhB,OAArB,EAA8B;AACnC,SAAO,UAAUiB,QAAV,EAAoB;AACzB,WAAOb,cAAc,CAACJ,OAAD,CAAd,CACJY,IADI,CACEM,YAAD,IAAkB;AACtBlB,MAAAA,OAAO,CAACM,SAAR,GACIW,QAAQ,CAACf,oBAAoB,CAACgB,YAAD,CAArB,CADZ,GAEID,QAAQ,CAAClB,oBAAoB,CAACmB,YAAD,CAArB,CAFZ;AAGD,KALI,EAMJJ,KANI,CAMGK,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KARI,CAAP;AASD,GAVD;AAWD;AAED,OAAO,eAAeN,cAAf,CAA8BO,QAA9B,EAAwC;AAC7C,MAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,WAAOD,QAAQ,CAACE,IAAhB;AACD;;AACD,QAAMH,KAAK,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAApB;AACA,QAAM,IAAIC,KAAJ,CAAUL,KAAV,CAAN;AACD;AAED,OAAO,SAASJ,WAAT,CAAqBI,KAArB,EAA4B;AACjCM,EAAAA,OAAO,CAACN,KAAR,CAAc,mBAAd;AACA,QAAMA,KAAN;AACD;AAED,OAAO,SAASO,WAAT,CAAqBC,UAArB,EAAiC;AACtC,SAAO,UAAUV,QAAV,EAAoB;AACzB,QAAIW,GAAG,GAAG,gCAAV;;AACA,QAAID,UAAJ,EAAgB;AACdC,MAAAA,GAAG,GAAGA,GAAG,GAAG,cAAN,GAAuBD,UAA7B;AACD;;AACD,WAAOtB,KAAK,CAACuB,GAAD,CAAL,CACJhB,IADI,CACEQ,QAAD,IAAcA,QAAQ,CAACE,IAAT,EADf,EAEJV,IAFI,CAEEiB,MAAD,IAAYZ,QAAQ,CAACvB,kBAAkB,CAACmC,MAAD,CAAnB,CAFrB,CAAP;AAGD,GARD;AASD","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport function getProductsSuccess(products) {\n  return {\n    type: actionTypes.GET_PRODUCTS_SUCCESS,\n    payload: products,\n  };\n}\n\nexport function createProductSuccess(product) {\n  return { type: actionTypes.CREATE_PRODUCT_SUCCESS, payload: product };\n}\n\nexport function updateProductSuccess(product) {\n  return { type: actionTypes.UPDATE_PRODUCT_SUCCESS, payload: product };\n}\n\nexport function saveProductApi(product) {\n  return fetch(\"http://localhost:3000/products/\" + (product.productID || \"\"), {\n    method: product.productID ? \"PUT\" : \"POST\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(product),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function saveProduct(product) {\n  return function (dispatch) {\n    return saveProductApi(product)\n      .then((savedProduct) => {\n        product.productID\n          ? dispatch(updateProductSuccess(savedProduct))\n          : dispatch(createProductSuccess(savedProduct));\n      })\n      .catch((error) => {\n        throw error;\n      });\n  };\n}\n\nexport async function handleResponse(response) {\n  if (response.ok) {\n    return response.json;\n  }\n  const error = await response.text();\n  throw new Error(error);\n}\n\nexport function handleError(error) {\n  console.error(\"An error occurred\");\n  throw error;\n}\n\nexport function getProducts(categoryID) {\n  return function (dispatch) {\n    let url = \"http://localhost:3000/products\";\n    if (categoryID) {\n      url = url + \"?categoryID=\" + categoryID;\n    }\n    return fetch(url)\n      .then((response) => response.json())\n      .then((result) => dispatch(getProductsSuccess(result)));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}