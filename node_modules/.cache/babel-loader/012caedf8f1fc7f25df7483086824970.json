{"ast":null,"code":"import { createDebuggerStatement } from \"typescript\";\nimport * as actionTypes from \"./actionTypes\";\nexport function getProductsSuccess(products) {\n  return {\n    type: actionTypes.GET_PRODUCTS_SUCCESS,\n    payload: products\n  };\n}\nexport function createProductSuccess(product) {\n  return {\n    type: actionTypes.CREATE_PRODUCT_SUCCESS,\n    payload: product\n  };\n}\nexport function updateProductSuccess(product) {\n  return {\n    type: actionTypes.UPDATE_PRODUCT_SUCCESS,\n    payload: product\n  };\n}\nexport function saveProductApi(product) {\n  return fetch(\"http://localhost:3000/products?productID=\" + (product.productID || \"\"), {\n    method: product.productID ? \"PUT\" : \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(product)\n  }).then(handleResponse).catch(handleError);\n}\nexport function saveProduct(product) {\n  return function (dispatch) {\n    return saveProductApi(product).then(saveProduct => {\n      product.productID ? dispatch(updateProductSuccess(saveProduct)) : dispatch(createProductSuccess(saveProduct));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport async function handleResponse(response) {\n  if (response.ok) {\n    return response.json;\n  }\n\n  const error = await response.text();\n  throw new Error(error);\n}\nexport function handleError(error) {\n  console.error(\"An error occurred\");\n  throw error;\n}\nexport function getProducts(categoryId) {\n  return function (dispatch) {\n    let url = \"http://localhost:3000/products\";\n\n    if (categoryId) {\n      url = url + \"?categoryID=\" + categoryId;\n    }\n\n    return fetch(url).then(response => response.json()).then(result => dispatch(getProductsSuccess(result)));\n  };\n}","map":{"version":3,"sources":["/Users/gereniz/Projects/btkakademi/btkakademireact/reactcourse/northwind-redux/src/redux/actions/productActions.js"],"names":["createDebuggerStatement","actionTypes","getProductsSuccess","products","type","GET_PRODUCTS_SUCCESS","payload","createProductSuccess","product","CREATE_PRODUCT_SUCCESS","updateProductSuccess","UPDATE_PRODUCT_SUCCESS","saveProductApi","fetch","productID","method","headers","body","JSON","stringify","then","handleResponse","catch","handleError","saveProduct","dispatch","error","response","ok","json","text","Error","console","getProducts","categoryId","url","result"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,YAAxC;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI,oBADb;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID;AAED,OAAO,SAASI,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,SAAO;AAAEJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,sBAApB;AAA4CH,IAAAA,OAAO,EAAEE;AAArD,GAAP;AACD;AAED,OAAO,SAASE,oBAAT,CAA8BF,OAA9B,EAAuC;AAC5C,SAAO;AAAEJ,IAAAA,IAAI,EAAEH,WAAW,CAACU,sBAApB;AAA4CL,IAAAA,OAAO,EAAEE;AAArD,GAAP;AACD;AAED,OAAO,SAASI,cAAT,CAAwBJ,OAAxB,EAAiC;AACtC,SAAOK,KAAK,CAAC,+CAA+CL,OAAO,CAACM,SAAR,IAAqB,EAApE,CAAD,EAA0E;AACpFC,IAAAA,MAAM,EAAEP,OAAO,CAACM,SAAR,GAAoB,KAApB,GAA4B,MADgD;AAEpFE,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF2E;AAGpFC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,OAAf;AAH8E,GAA1E,CAAL,CAKJY,IALI,CAKCC,cALD,EAMJC,KANI,CAMEC,WANF,CAAP;AAOD;AAED,OAAO,SAASC,WAAT,CAAqBhB,OAArB,EAA8B;AACnC,SAAO,UAAUiB,QAAV,EAAoB;AACzB,WAAOb,cAAc,CAACJ,OAAD,CAAd,CACJY,IADI,CACEI,WAAD,IAAiB;AACrBhB,MAAAA,OAAO,CAACM,SAAR,GACIW,QAAQ,CAACf,oBAAoB,CAACc,WAAD,CAArB,CADZ,GAEIC,QAAQ,CAAClB,oBAAoB,CAACiB,WAAD,CAArB,CAFZ;AAGD,KALI,EAMJF,KANI,CAMGI,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KARI,CAAP;AASD,GAVD;AAWD;AAED,OAAO,eAAeL,cAAf,CAA8BM,QAA9B,EAAwC;AAC7C,MAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,WAAOD,QAAQ,CAACE,IAAhB;AACD;;AACD,QAAMH,KAAK,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAApB;AACA,QAAM,IAAIC,KAAJ,CAAUL,KAAV,CAAN;AACD;AAED,OAAO,SAASH,WAAT,CAAqBG,KAArB,EAA4B;AACjCM,EAAAA,OAAO,CAACN,KAAR,CAAc,mBAAd;AACA,QAAMA,KAAN;AACD;AAED,OAAO,SAASO,WAAT,CAAqBC,UAArB,EAAiC;AACtC,SAAO,UAAUT,QAAV,EAAoB;AACzB,QAAIU,GAAG,GAAG,gCAAV;;AACA,QAAID,UAAJ,EAAgB;AACdC,MAAAA,GAAG,GAAGA,GAAG,GAAG,cAAN,GAAuBD,UAA7B;AACD;;AACD,WAAOrB,KAAK,CAACsB,GAAD,CAAL,CACJf,IADI,CACEO,QAAD,IAAcA,QAAQ,CAACE,IAAT,EADf,EAEJT,IAFI,CAEEgB,MAAD,IAAYX,QAAQ,CAACvB,kBAAkB,CAACkC,MAAD,CAAnB,CAFrB,CAAP;AAGD,GARD;AASD","sourcesContent":["import { createDebuggerStatement } from \"typescript\";\nimport * as actionTypes from \"./actionTypes\";\n\nexport function getProductsSuccess(products) {\n  return {\n    type: actionTypes.GET_PRODUCTS_SUCCESS,\n    payload: products,\n  };\n}\n\nexport function createProductSuccess(product) {\n  return { type: actionTypes.CREATE_PRODUCT_SUCCESS, payload: product };\n}\n\nexport function updateProductSuccess(product) {\n  return { type: actionTypes.UPDATE_PRODUCT_SUCCESS, payload: product };\n}\n\nexport function saveProductApi(product) {\n  return fetch(\"http://localhost:3000/products?productID=\" + (product.productID || \"\"), {\n    method: product.productID ? \"PUT\" : \"POST\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(product),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function saveProduct(product) {\n  return function (dispatch) {\n    return saveProductApi(product)\n      .then((saveProduct) => {\n        product.productID\n          ? dispatch(updateProductSuccess(saveProduct))\n          : dispatch(createProductSuccess(saveProduct));\n      })\n      .catch((error) => {\n        throw error;\n      });\n  };\n}\n\nexport async function handleResponse(response) {\n  if (response.ok) {\n    return response.json;\n  }\n  const error = await response.text();\n  throw new Error(error);\n}\n\nexport function handleError(error) {\n  console.error(\"An error occurred\");\n  throw error;\n}\n\nexport function getProducts(categoryId) {\n  return function (dispatch) {\n    let url = \"http://localhost:3000/products\";\n    if (categoryId) {\n      url = url + \"?categoryID=\" + categoryId;\n    }\n    return fetch(url)\n      .then((response) => response.json())\n      .then((result) => dispatch(getProductsSuccess(result)));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}